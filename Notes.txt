
Chapter 3 - Basic Concepts 

1. Compoud types 

A compound types is a type that is composed of other types. (The C language uses the term derived type.). The keywords struct and class identify as compound types. 

C++ requires use of either keyword in the definition of the compound types. ( both struct , and class keyword are valid in c++)

//C style
struct Transaction {
    int acct; // account
    chat type; // thpe c credit d debit
    double amount; //transaction amount
}

Forward declaration ; 

struct Transaction; // Forward declaration , it informs the compiler that the type is a valid compound type without defining the type. 

//C++ doesn't require "STRUCT" keyword in prototypes or memory allocations

C++ // 

void enter(Transaction * );
void display(const Transaction*);

int main(){
    Transaction tr;
}

C Version 

void enter(struct Transaction *);
void display(const struct Transaction*);

int main(){
    struct Transaction tr;
}


----------------
"auto" keyword -- declares a variable or object and deduces its type from the type of its initializer.

auto x = 4; // x is of type int 
auto x = 3.4 // x is type of double 

------------

you can access struct pointer variable using -> operator 

void display ( const Transaction *tr){
    cout << "account" >> tr->acct << endl; 
}

--- 

C++ has one definition rule, which means forward declarations or function prototypes can have only one definition, or compiler will throw an compiler error. ( Look chapter3 onedefinition rule explain)

Default parameter value - ( look chapter3 - defaultparam.cpp)

-------------- HOW TO RUN A PROGRAM IN C++ AND KOTLIN Command prompt ---------------------

C++
====

To compile: 
> g++ sourceFile.cpp -o outputFilename

To run:
> ./outputFilename  

While compiling multiple Cpp and header files, remember one definition rule.
If main has included impl.cpp file then no need to add it while compiling that file.
i.e. g++ Node.cpp NodeImpl.cpp NodeMain.cpp
in this case, NodeMain.cpp has included header file NodeImpl thus no need to compile that.
it should be,  "g++ Node.cpp NodeMain.cpp -o app" only.

Kotlin 
======

To compile: 
> kotlinc hello.kt -include-runtime -d hello.jar

To run:
> java -jar hello.jar  

=================

links of useful commands of gcc - https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Overall-Options.html#Overall%20Options 

=================

Alt+shift+F = Format code on Windows in VSC. 

=================

echo -e ${PATH//:/\\n}   --> to print all paths with newline in Windows 
which g++   --> To find set path of a particular command

