
Chapter 3 - Basic Concepts 

1. Compoud types 

A compound types is a type that is composed of other types. (The C language uses the term derived type.). The keywords struct and class identify as compound types. 

C++ requires use of either keyword in the definition of the compound types. ( both struct , and class keyword are valid in c++)

//C style
struct Transaction {
    int acct; // account
    chat type; // thpe c credit d debit
    double amount; //transaction amount
}

Forward declaration ; 

struct Transaction; // Forward declaration , it informs the compiler that the type is a valid compound type without defining the type. 

//C++ doesn't require "STRUCT" keyword in prototypes or memory allocations

C++ // 

void enter(Transaction * );
void display(const Transaction*);

int main(){
    Transaction tr;
}

C Version 

void enter(struct Transaction *);
void display(const struct Transaction*);

int main(){
    struct Transaction tr;
}


----------------
"auto" keyword -- declares a variable or object and deduces its type from the type of its initializer.

auto x = 4; // x is of type int 
auto x = 3.4 // x is type of double 

------------

you can access struct pointer variable using -> operator 

void display ( const Transaction *tr){
    cout << "account" >> tr->acct << endl; 
}

--- 

C++ has one definition rule, which means forward declarations or function prototypes can have only one definition, or compiler will throw an compiler error. ( Look chapter3 onedefinition rule explain)

Default parameter value - ( look chapter3 - defaultparam.cpp)

-------------- HOW TO RUN A PROGRAM IN C++ AND KOTLIN Command prompt ---------------------

C++
====

To compile: 
> g++ sourceFile.cpp -o outputFilename

To run:
> ./outputFilename  

While compiling multiple Cpp and header files, remember one definition rule.
If main has included impl.cpp file then no need to add it while compiling that file.
i.e. g++ Node.cpp NodeImpl.cpp NodeMain.cpp
in this case, NodeMain.cpp has included header file NodeImpl thus no need to compile that.
it should be,  "g++ Node.cpp NodeMain.cpp -o app" only.

Kotlin 
======

To compile: 
> kotlinc hello.kt -include-runtime -d hello.jar

To run:
> java -jar hello.jar  

=================

links of useful commands of gcc - https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Overall-Options.html#Overall%20Options 

=================

Alt+shift+F = Format code on Windows in VSC. 

=================

echo -e ${PATH//:/\\n}   --> to print all paths with newline in Windows 
which g++   --> To find set path of a particular command

Key bindings track:

Firefox
    Alt + <-- / -->  || To go backward in visted pages history - firefox 
    Ctrl + tab -> switch between tabs
    Ctrl + L  - jump to address bar -- Ctrl + E - search 


VSC
    Alt + <-- / -->  || jump between opened files  - more like going back , 
    Ctrl+tab for jump between opened files, add shift if wanna go in different order from last to first
    Ctrl + `    = open terminal , Ctrl + shift + `  --> open new terminal 
    Ctrl+ shift+ p  -> Command pallete
    Ctrl + P -> search file names.
    Ctrl + shift + k  , Ctrl+x  -> delete line 
    Ctrl + shift + v  - paste code without format.

    Ctrl + j -> opens terminal 
    Ctrl + shift + E -> opens editor files explorer
    Ctrl + L -> select a line
    Ctrl + g -> jump to a specific line number
    Ctrl + D -> find duplicate and replace all occurances       
    Alt + up/down -> move a line
    Ctrl + 1 (number) -> switch between split editor windows
    shift + c + down/up arrow (Column selection - changed myself) to select columns and remove space for
        To use shift+C -> Shift+c -> keep holding shift n then up and down arrow.
        Notes: Shift +C will enter into column mode.. then use Shift+arrow key for selection. Press shift+c to exit that column selection mode.
    Ctrl+ shift + arrow -> for selecting one word and then ctrl + ALT + arrow up/down to keep selection there and replace many occurances at the same indentation
    Alt + shift + up/down to duplicate a line down or up.
    Alt + shift + forth arrow will select a block of code such as a function with curly braces
        important - placement of cursor shouldn't be next to a word, otherwise word selection will trigger.
        if next to a word, then keep pressing to increase the area of selection. 
    Alt + T -> Toggle Terminal -> focus on Terminal in panel
    Ctrl+shift+` opens a new terminal
    Ctrl + alt + t -> openInTerminal -> opens a terminal with current directory open 
    Ctrl + j -> opens a panel with output/terminal
    Shift + K -> kill the active terminal 
        workbench.action.terminal  terminal.focusAtIndex1 -> Added alt+i 
    F12 -> definition, alt+f12 - peek definition
    Ctrl + q -> query to open search, explorer and many other options
    Ctrl+shift+ M -> Terminal - PROBLEMS... problems to check effors and jump to those lines.
    Ctrl + shift + u -> terminal - OUTPUT 
    Ctrl + , -> settings
    Ctrl + shift + L -> editor.action.selectHighlights -> selects all occurances n ability to edit or remove..
        Ctrl + D - allows you to select in order, but Ctrl+shift+L does select all occurances
        Ctrl + D  can also be used to select current word without using ctrl+shift+arrow
    Ctrl+ c -> without any selection just at the start of a line, will copy the entire line and you can paste, just like ctrl +x - cuts without selection
        alternatives - Alt+shift+arrow up or down
    Ctrl + l -> selects the entire line and then  () or "" to wrap 

Notes on make files
    To run make file = make -f `makeFileName`

-> Interactively run (When c++ program asks for an input) a program use this command:
   Cu Mx compile make -f `makeFileName`
   if done with Mx, doesn't work.

-> Other useful commands
   Cx d -> browse through directory
   Cx Cf -> files
   Cx Cs -> save file
   Cx d :/ to go to home directory in case to change .emacs files.
   Cx d d:/ to get to other drive directory
   Mx recentf-open-files - to open recently opened files.
   Mx recompile to rerun the code in compilation mode.
   Navigate through buffers Cx Cb -> possible another way to check opened files in emacs and navigate through it.
-> gdb mode
   Mx Gdb
   watch var -> to watch
   p var -> to print
   b 11 -> break point at that line number
   run -> run the program.
   c - continue
   s -> step through
   display var
   

   --To save and restore breakpoints in gdb
   save-breakpoints fileName
   source fileName 
   

-> Copy line
   C space -> turn on selection
   Get to end or start of a line by C a / C e
   then CSpace
   C e / C a either side you want selection to go
   M w to copy the region
   C y yank (paste)

-> Buffer
   Cx Cb -> buffers
   jump between opened buffers - Cx left/right arrow.
